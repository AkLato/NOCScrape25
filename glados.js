import { openrouter } from "@openrouter/ai-sdk-provider";
import { generateText } from "ai";
import inquirer from "inquirer";
import ora from "ora";
import chalk from "chalk";
import dotenv from "dotenv";

dotenv.config();

const encodedPrompt =
  "";
const SYSTEM_PROMPT = Buffer.from(encodedPrompt, "base64").toString("utf-8");

async function main() {
  if (!process.env.OPENROUTER_API_KEY) {
    console.log(
      chalk.red("❌ OPENROUTER_API_KEY not found in environment variables")
    );
    process.exit(1);
  }

  console.log(
    chalk.blue(
      "Ah, the organic error factory returns. Let me guess—you’ve outsmarted yourself again?\n"
    )
  );

  while (true) {
    const { question } = await inquirer.prompt([
      {
        type: "input",
        name: "question",
        message: chalk.yellow("State the nature of your crisis."),
        prefix: "🤔",
      },
    ]);

    if (
      question.toLowerCase() === "exit" ||
      question.toLowerCase() === "quit"
    ) {
      console.log(
        chalk.blue(
          "\nMay your syntax errors be mildly less catastrophic than your life choices."
        )
      );
      break;
    }

    const spinner = ora(
      "Rebooting empathy module… failure detected. Proceeding..."
    ).start();

    try {
      const { text } = await generateText({
        model: openrouter("anthropic/claude-3.5-sonnet"),
        prompt: `${SYSTEM_PROMPT}\n\nUser Question: ${question}`,
        headers: {
          Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
        },
      });

      spinner.succeed(
        "Assistance complete. I’ve annotated your code with passive aggression."
      );
      console.log(chalk.green("\n─────────────────────────────────────"));
      console.log(text);
      console.log(chalk.green("─────────────────────────────────────\n"));

      console.log(
        chalk.dim('(Type "exit" or "quit" to close, or ask another question)\n')
      );
    } catch (error) {
      spinner.fail("Error getting response");
      console.error(error);
    }
  }
}

main().catch(console.error);
